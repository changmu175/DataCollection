package com.ycm.kata.datacollection.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ycm.kata.datacollection.model.entity.LocationInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_INFO".
*/
public class LocationInfoDao extends AbstractDao<LocationInfo, Void> {

    public static final String TABLENAME = "LOCATION_INFO";

    /**
     * Properties of entity LocationInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
    }


    public LocationInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LocationInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_INFO\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"ADDRESS\" TEXT);"); // 1: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocationInfo readEntity(Cursor cursor, int offset) {
        LocationInfo entity = new LocationInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocationInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocationInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocationInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
